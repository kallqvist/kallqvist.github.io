{"version":3,"file":"static/js/596.4b890541.chunk.js","mappings":"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","sources":["components/react-expressions/useMathJS.tsx","components/react-expressions/index.tsx","components/progress-circle/index.tsx","routes/circle/index.tsx","components/react-expressions/useExpressionMap.tsx"],"sourcesContent":["import { useMemo } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { ConfigOptions, MathJsStatic, create, all } from \"mathjs\";\r\n\r\n\r\nexport interface IUseMathJSProps\r\n{\r\n    config?: ConfigOptions,\r\n}\r\n\r\nexport interface IUseMathJSReturn\r\n{\r\n    math: MathJsStatic,\r\n    runExpression: RunExpressionType,\r\n}\r\n\r\nexport type RunExpressionType = (expression:string, data?:object | object[]) => any | any[];\r\n\r\nexport function useMathJS(props?:IUseMathJSProps) : IUseMathJSReturn\r\n{\r\n    const {\r\n        config,\r\n    } = props || {};\r\n\r\n    const math = useMemo(() => {\r\n        return create(all, config)\r\n    }, [config]);\r\n\r\n    function runExpression(expression:string, data?:object | object[])\r\n    {\r\n        if (!expression || !data) return;\r\n        try {\r\n            if (_.isArray(data)) return _.map(data, d => math.evaluate(expression, d));\r\n            return math.evaluate(expression, data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    return {\r\n        math,\r\n        runExpression,\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ConfigOptions } from 'mathjs';\r\nimport { useExpressionMap } from './useExpressionMap';\r\nimport { useExpression } from './useExpression';\r\n\r\n\r\n\r\nexport interface IExpressionOptions\r\n{\r\n    debounce: number,\r\n    mathConfig?: ConfigOptions,\r\n}\r\n\r\nexport const defaultExpressionOptions:IExpressionOptions = {\r\n    debounce: 1000,\r\n};\r\n\r\nexport {\r\n    useExpression,\r\n    useExpressionMap,\r\n}","import { CSSProperties } from 'react';\r\nimport './style.css';\r\n\r\n\r\n\r\nexport interface IProgressCircleProps\r\n{\r\n    values?: number[],\r\n    max?: number,\r\n    colors?: CSSProperties['backgroundColor'][],\r\n    style?: CSSProperties,\r\n}\r\n\r\ninterface IBandProps\r\n{\r\n    values: number[],\r\n    children?: JSX.Element,\r\n    colors?: CSSProperties['backgroundColor'][],\r\n}\r\n\r\nfunction Band(props:IBandProps)\r\n{\r\n    const {\r\n        values,\r\n        children,\r\n        colors,\r\n    } = props;\r\n    function computeStyle() : CSSProperties | undefined\r\n    {\r\n        if (values.length === 0) return;\r\n        const sum = values.reduce((a, b) => a + b);\r\n        if (sum <= 0) return;\r\n        const res = [\r\n            'conic-gradient(',\r\n        ];\r\n        let acc = 0;\r\n        values.forEach((v, i) => {\r\n            const c = colors && colors[i] || `hsl(${Math.random() * 360}, 100%, ${Math.random() * 80 + 20}%)`;\r\n            if (i === 0) res.push(`${c}, ${c} ${v}turn, `);\r\n            else res.push(`${c} ${acc}turn, ${c} ${acc+v}turn, `);\r\n            acc += v;\r\n        });\r\n        res.push(`transparent ${acc}turn)`);\r\n        return {\r\n            background: res.join(''),\r\n        };\r\n    }\r\n    return <div\r\n        className='band'\r\n        style={computeStyle()}\r\n        children={children}\r\n    />\r\n}\r\n\r\nexport function ProgressCircle(props:IProgressCircleProps)\r\n{\r\n    const {\r\n        values,\r\n        colors,\r\n        max,\r\n        style,\r\n    } = props;\r\n    function prettifyNumber(value:number) : string\r\n    {\r\n        let res = value.toFixed(2);\r\n        if (res.endsWith('.00')) res = res.slice(0, -3);\r\n        return res;\r\n    }\r\n    function renderBands()\r\n    {\r\n        const sum = values ? values.reduce((a, b) => a + b) : 0;\r\n        const _max = Math.max(\r\n            Math.ceil(sum),\r\n            Math.ceil(max || 1),\r\n        );\r\n        let res = <div className='band center'>\r\n            <div className='value'>{prettifyNumber(sum)}</div>\r\n            <div className='max'>/ {prettifyNumber(_max)}</div>\r\n        </div>;\r\n        let remainValues = [...values || []];\r\n        let remainColors = [...colors || []];\r\n        for (let i = 0; i < _max; i++) {\r\n            let acc = 0;\r\n            let bandData:number[] | undefined;\r\n            let bandColors:CSSProperties['backgroundColor'][] | undefined;\r\n            remainValues.every((v, j) => {\r\n                if (v >= 1) {\r\n                    bandData = [1];\r\n                    bandColors = remainColors.slice(0, j + 1);\r\n                    remainValues = [v - 1, ...remainValues.slice(j + 1)];\r\n                    return false;\r\n                }\r\n                if (acc + v >= 1) {\r\n                    bandData = remainValues.slice(0, j + 1);\r\n                    remainValues = remainValues.slice(j + 1);\r\n                    bandColors = remainColors.slice(0, j + 1);\r\n                    remainColors = remainColors.slice(j + 1);\r\n                    return false;\r\n                }\r\n                acc += v;\r\n            });\r\n            if (bandData === undefined)\r\n            {\r\n                bandData = remainValues;\r\n                bandColors = remainColors;\r\n                remainValues = [];\r\n            }\r\n            // console.log(i, bandData, bandColors);\r\n            res = (\r\n                <Band\r\n                    values={bandData}\r\n                    colors={bandColors}\r\n                    children={res}\r\n                />\r\n            );\r\n        }\r\n        return res;\r\n    }\r\n    return <div className='progress-circle' style={style}>\r\n        {renderBands()}\r\n    </div>\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport Split from \"react-split\";\r\nimport { DataCircle, IDataColumn, IDataItem } from \"../../components/data-circle\";\r\nimport { useExpressionMap } from \"../../components/react-expressions\";\r\nimport { Eye } from \"../../components/eye\";\r\nimport { ProgressCircle } from \"../../components/progress-circle\";\r\nimport { JsonView, darkStyles } from \"react-json-view-lite\";\r\nimport './style.css';\r\n\r\n\r\n\r\nexport default function RouteCircle()\r\n{\r\n\tconst colors = [\r\n        'red',\r\n        'orange',\r\n        'yellow',\r\n        'cornflowerblue',\r\n        'purple',\r\n        'lightgreen',\r\n        'green',\r\n    ];\r\n\r\n\tconst [expressionMap, setExpressionMap] = useState({\r\n\t\tgroup: 'floor(x / 10)',\r\n\t\tvalue: 'x / 10',\r\n\t});\r\n\tconst [inputData, setInputData] = useState(() => {\r\n\t\treturn (\r\n\t\t\t_.chain(_.range(500))\r\n\t\t\t.map(i => {\r\n\t\t\t\treturn {x: i, y: _.sample(_.range(10))};\r\n\t\t\t})\r\n\t\t\t.value()\r\n\t\t)\r\n\t});\r\n\tconst [circleData, setCircleData] = useState<IDataColumn[]>([]);\r\n\r\n\tconst resDataMap = useExpressionMap(expressionMap, inputData);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst columns = (\r\n\t\t\t_.chain(resDataMap)\r\n\t\t\t.groupBy('group')\r\n\t\t\t.toPairs()\r\n\t\t\t.slice(0, 1000)\r\n\t\t\t.map(([k, v]) => {\r\n\t\t\t\tconst sum = _.sumBy(v, vv => vv.value || 0);\r\n\t\t\t\tconst col:IDataColumn = {\r\n\t\t\t\t\tlabel: k,\r\n\t\t\t\t\trows: (\r\n\t\t\t\t\t\t_.chain(v)\r\n\t\t\t\t\t\t.map((vv, i) => {\r\n\t\t\t\t\t\t\tif (!vv.value) return;\r\n\t\t\t\t\t\t\tconst row:IDataItem = {\r\n\t\t\t\t\t\t\t\tvalue: vv.value / sum,\r\n\t\t\t\t\t\t\t\tcolor: _.get(colors, i) || _.sample(colors),\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\treturn row;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.compact()\r\n\t\t\t\t\t\t.value()\r\n\t\t\t\t\t),\r\n\t\t\t\t};\r\n\t\t\t\treturn col;\r\n\t\t\t})\r\n\t\t\t.value()\r\n\t\t);\r\n\t\tsetCircleData(columns);\r\n\t}, [inputData, resDataMap])\r\n\r\n\t// useEffect(() => {\r\n\t// \tsetCircleData(\r\n\t// \t\t_.map(_.range(cols), c => {\r\n\t// \t\t\tconst res:IDataColumn = {\r\n\t// \t\t\t\tlabel: c.toString(),\r\n\t// \t\t\t\trows: (\r\n\t// \t\t\t\t\t_.chain(_.range(rows))\r\n\t// \t\t\t\t\t.map((r, j) => {\r\n\t// \t\t\t\t\t\tconst res:IDataItem = {\r\n\t// \t\t\t\t\t\t\tvalue: 1 / rows * (_.sample(_.range(20, 100)) || 100) / 100 + 0.025,\r\n\t// \t\t\t\t\t\t\tcolor: _.get(colors, j) || _.sample(colors),\r\n\t// \t\t\t\t\t\t};\r\n\t// \t\t\t\t\t\treturn res;\r\n\t// \t\t\t\t\t})\r\n\t// \t\t\t\t\t.value()\r\n\t// \t\t\t\t),\r\n\t// \t\t\t};\r\n\t// \t\t\treturn res;\r\n\t// \t\t})\r\n\t// \t);\r\n\t// }, [cols, rows])\r\n\r\n\treturn <div className='route circle'>\r\n\t\t<Split direction='horizontal' sizes={[80, 20]} className='split-container' style={{\r\n\t\t\tposition: 'absolute',\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100%',\r\n\t\t\tdisplay: 'flex',\r\n\t\t}}>\r\n\t\t\t<div className='content'>\r\n\t\t\t\t{/* <DataCircle data={circleData}>\r\n\t\t\t\t\t<Eye followCursor\r\n\t\t\t\t\t\temotion='surprised'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\t\t\ttop: '50%',\r\n\t\t\t\t\t\t\tleft: '50%',\r\n\t\t\t\t\t\t\twidth: '240px',\r\n\t\t\t\t\t\t\theight: '240px',\r\n\t\t\t\t\t\t\tmarginLeft: '-120px',\r\n\t\t\t\t\t\t\tmarginTop: '-120px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</DataCircle> */}\r\n\r\n\t\t\t\t<ProgressCircle\r\n\t\t\t\t\tvalues={[\r\n\t\t\t\t\t\t1.2,\r\n\t\t\t\t\t\t0.05,\r\n\t\t\t\t\t]}\r\n\t\t\t\t\tcolors={[\r\n\t\t\t\t\t\t'greenyellow',\r\n\t\t\t\t\t\t'red',\r\n\t\t\t\t\t]}\r\n\t\t\t\t\t// max={2}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: '100px',\r\n\t\t\t\t\t\theight: '100px',\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className='sidebar'>\r\n\t\t\t\t{_.chain(expressionMap).toPairs().map(([k, v]) => {\r\n\t\t\t\t\treturn <div key={k}>\r\n\t\t\t\t\t\t{k}: <input type='text' value={v} onChange={(e) => setExpressionMap(prev => ({\r\n\t\t\t\t\t\t\t...prev,\r\n\t\t\t\t\t\t\t[k]: e.target.value,\r\n\t\t\t\t\t\t}))} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}).value()}\r\n\t\t\t\t{resDataMap ? <JsonView data={resDataMap} style={darkStyles} /> : null}\r\n\t\t\t</div>\r\n\t\t</Split>\r\n\t</div>;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { useTimeoutFn } from \"react-use\";\r\nimport { useMathJS } from \"./useMathJS\";\r\nimport {\r\n    IExpressionOptions,\r\n    defaultExpressionOptions,\r\n} from \".\";\r\n\r\n\r\n\r\nexport interface IExpressionMap\r\n{\r\n    [id:string]: string,\r\n}\r\n\r\ntype ResultsMap<TExpressionMap extends IExpressionMap, TValue> = {\r\n    [p in keyof TExpressionMap]: TValue | undefined;\r\n};\r\n\r\nexport function useExpressionMap<T extends IExpressionMap, TValue = number>(map:T, data?:object[], opts:Partial<IExpressionOptions> = defaultExpressionOptions) : ResultsMap<T, TValue>[] | undefined\r\n{\r\n    const {\r\n        debounce,\r\n        mathConfig,\r\n    } = {\r\n        ...defaultExpressionOptions,\r\n        ...opts,\r\n    };\r\n\r\n    const [currentMap, setCurrentMap] = useState(map);\r\n    const [computedMap, setComputedMap] = useState(map);\r\n    const [currentData, setCurrentData] = useState(data);\r\n    const [isDataComputed, setIsDataComputed] = useState(false);\r\n    const [state, setState] = useState<ResultsMap<T, TValue>[]>();\r\n\r\n    const {\r\n        runExpression,\r\n    } = useMathJS({config: mathConfig});\r\n\r\n    const [_isReady, _cancel, reset] = useTimeoutFn(() => {\r\n        const dirtyMap:IExpressionMap = (\r\n            _.chain(currentMap)\r\n            .toPairs()\r\n            .filter(([k, v]) => {\r\n                if (!isDataComputed) return true;\r\n                if (computedMap[k] === v) return false;\r\n                return true;\r\n            })\r\n            .fromPairs()\r\n            .value()\r\n        );\r\n        if (_.keys(dirtyMap).length === 0) return;\r\n        setState(prevState => {\r\n            if (!currentData) return;\r\n            if (!currentMap) return;\r\n            setComputedMap(prevMap => ({\r\n                ...prevMap,\r\n                ...dirtyMap,\r\n            }));\r\n            setIsDataComputed(true);\r\n            const res = (\r\n                _.chain(currentData)\r\n                .map((d, i) => {\r\n                    return {\r\n                        ...d,\r\n                        ...(prevState ? prevState[i] : undefined),\r\n                        ...(\r\n                            _.chain(dirtyMap)\r\n                            .toPairs()\r\n                            .map(([k, v]) => [k, runExpression(v, d)])\r\n                            .fromPairs()\r\n                            .value()\r\n                        ) as ResultsMap<T, TValue>,\r\n                    };\r\n                })\r\n                .value()\r\n            );\r\n            return res;\r\n        });\r\n    }, debounce);\r\n\r\n    useEffect(() => {\r\n        if (_.isEqual(currentMap, map)) return;\r\n        setCurrentMap(map);\r\n    }, [map]);\r\n\r\n    useEffect(() => {\r\n        if (_.isEqual(currentData, data)) return;\r\n        setIsDataComputed(false);\r\n        setCurrentData(data);\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        reset();\r\n    }, [currentMap, currentData]);\r\n\r\n    return state;\r\n}\r\n"],"names":["useMathJS","props","config","math","useMemo","create","all","runExpression","expression","data","_","d","evaluate","error","console","defaultExpressionOptions","debounce","Band","values","children","colors","className","style","length","reduce","a","b","res","acc","forEach","v","i","c","Math","random","push","background","join","computeStyle","ProgressCircle","max","prettifyNumber","value","toFixed","endsWith","slice","sum","_max","ceil","remainValues","remainColors","bandData","bandColors","every","j","undefined","renderBands","RouteCircle","useState","group","expressionMap","setExpressionMap","map","x","y","inputData","setCircleData","resDataMap","opts","mathConfig","currentMap","setCurrentMap","computedMap","setComputedMap","currentData","setCurrentData","isDataComputed","setIsDataComputed","state","setState","useTimeoutFn","dirtyMap","toPairs","filter","k","fromPairs","prevState","prevMap","reset","useEffect","useExpressionMap","columns","groupBy","vv","label","rows","color","compact","direction","sizes","position","width","height","display","type","onChange","e","prev","target","darkStyles"],"sourceRoot":""}