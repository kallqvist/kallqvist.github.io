{"version":3,"file":"static/js/864.b6b03530.chunk.js","mappings":"4MASO,SAASA,EAAMC,GAElB,IACIC,EACAD,EADAC,SAaJ,OAAO,gBAAKC,UAAU,QAAO,UACzB,SAAC,KAAU,CACPC,YAZR,SAA2BC,GAEvBC,QAAQC,IAAI,aAAcF,EAC9B,EAUQG,UARR,SAAyBH,GAErBC,QAAQC,IAAI,WAAYF,EAC5B,EAKmC,SAE1BH,KAGb,C,8DClBO,SAASO,EAAKR,GAEjB,IACIS,EAEAT,EAFAS,GACAR,EACAD,EADAC,SAKJ,GAMIS,EAAAA,EAAAA,IAAa,CAACD,GAAAA,IALdE,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAU,EAAVA,WAGJ,GAAgCC,EAAAA,EAAAA,WAAS,GAAM,eAAxCC,EAAQ,KAAEC,EAAW,KAE5B,GAAwBC,EAAAA,EAAAA,YAAU,WAW9B,MAAO,CACHC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,IAC3CT,UAVAU,IAAAA,MAAQ,CACJV,EAAS,sBAAkBA,EAAUW,EAAC,eAAOX,EAAUY,EAAC,yCACxDf,EAAU,iBAjBJ,IAiB0B,oBAjB1B,IAiB+C,KAAM,wBAE9DgB,UACAC,KAAK,KACLC,QAKDC,QAAS,kBAAMZ,GAAY,EAAK,EAChCa,OAAQ,kBAAMb,GAAY,EAAM,EAExC,GAAG,CAACJ,EAAWH,IAjBRqB,GAiBoB,YAjBP,GAmBdC,EACFT,IAAAA,MAAQ,CACJ,OACAb,GAAcM,EAAW,gBAAaiB,IAEzCP,UACAC,KAAK,KACLC,QAGL,OAAO,SAAC,EAAAM,SAAA,KAAY,gBAChBC,IAAKrB,EACLb,UAAW+B,EACXhC,SAAUA,EACVoC,MAAOL,GACHnB,GACAD,GAEZ,CC5DO,SAAS0B,EAAKtC,GAEjB,IACIS,EAEAT,EAFAS,GACA8B,EACAvC,EADAuC,MAGJ,GAA6BC,EAAAA,EAAAA,IAAa,CAAC/B,GAAAA,IAApCgC,EAAM,EAANA,OAAQ1B,EAAU,EAAVA,WAETsB,EAAwCI,EAAS,CACnDC,YAAa,cACbR,EAEJ,OAAO,gBAAKE,IAAKrB,EAAYsB,MAAOA,EAAOnC,UAAU,OAAM,SACtDqC,EAAQA,EAAMI,KAAI,SAACC,EAAMC,GAAC,OACvB,SAACrC,GAAI,UAAaoC,GAAPC,EAAe,IACzB,MAEb,CCtBO,SAASC,KAEEC,EAAAA,EAAAA,MAMjB,OAAO,gBAAK7C,UAAU,aAAY,UACjC,SAACH,EAAK,WACL,iBAAKsC,MAAO,CACXW,QAAS,OACTC,IAAK,SACJ,WACD,SAACX,EAAI,CAAC7B,GAAG,YACT,SAACD,EAAI,CAACC,GAAG,YACT,SAACD,EAAI,CAACC,GAAG,iBAIb,CAEA,O","sources":["components/deck/table/index.tsx","components/deck/card/index.tsx","components/deck/pile/index.tsx","routes/cards/index.tsx"],"sourcesContent":["import { DndContext, DragStartEvent, DragEndEvent } from '@dnd-kit/core';\r\n\r\n\r\n\r\nexport interface ITableProps\r\n{\r\n    children: React.ReactNode,\r\n}\r\n\r\nexport function Table(props:ITableProps)\r\n{\r\n    const {\r\n        children,\r\n    } = props;\r\n\r\n    function handleOnDragStart(e:DragStartEvent)\r\n    {\r\n        console.log('drag start', e);\r\n    }\r\n\r\n    function handleOnDragEnd(e:DragEndEvent)\r\n    {\r\n        console.log('drag end', e);\r\n    }\r\n\r\n    return <div className='table'>\r\n        <DndContext\r\n            onDragStart={handleOnDragStart}\r\n            onDragEnd={handleOnDragEnd}\r\n        >\r\n            {children}\r\n        </DndContext>\r\n    </div>\r\n}","import { useState } from 'react';\r\nimport _ from 'lodash';\r\nimport { useDraggable } from '@dnd-kit/core';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './style.css';\r\n\r\n\r\n\r\nexport interface ICardProps\r\n{\r\n    id: string,\r\n    children?: React.ReactNode,\r\n}\r\n\r\nexport function Card(props:ICardProps)\r\n{\r\n    const {\r\n        id,\r\n        children,\r\n    } = props;\r\n\r\n    const dragScale = 1.1;\r\n    \r\n    const {\r\n        isDragging,\r\n        attributes,\r\n        listeners,\r\n        transform,\r\n        setNodeRef,\r\n    } = useDraggable({id});\r\n\r\n    const [isMoving, setIsMoving] = useState(false);\r\n\r\n    const [wrapAnimProps] = useSpring(() => {\r\n        // const t = transform ? `translate3d(${transform.x}px, ${transform.y}px, 0px)` : `translate3d(0px, 0px, 0px)`;\r\n        const t = (\r\n            _.chain([\r\n                transform ? `translate3d(${transform.x}px, ${transform.y}px, 0px)` : `translate3d(0px, 0px, 0px)`,\r\n                isDragging ? `scaleX(${dragScale}) scaleY(${dragScale})` : 'scaleX(1) scaleY(1)',\r\n            ])\r\n            .compact()\r\n            .join(' ')\r\n            .value()\r\n        );\r\n        return {\r\n            config: { mass: 2, tension: 600, friction: 50 },\r\n            transform: t,\r\n            onStart: () => setIsMoving(true),\r\n            onRest: () => setIsMoving(false),\r\n        };\r\n    }, [transform, isDragging]);\r\n    \r\n    const classNames = (\r\n        _.chain([\r\n            'card',\r\n            isDragging || isMoving ? 'dragging' : undefined,\r\n        ])\r\n        .compact()\r\n        .join(' ')\r\n        .value()\r\n    );\r\n\r\n    return <animated.div\r\n        ref={setNodeRef}\r\n        className={classNames}\r\n        children={children}\r\n        style={wrapAnimProps}\r\n        {...listeners}\r\n        {...attributes}\r\n    />\r\n}","import { useDroppable } from '@dnd-kit/core';\r\nimport { Card, ICardProps } from '../card';\r\nimport './style.css';\r\n\r\n\r\nexport interface IPileProps\r\n{\r\n    id: string,\r\n    cards?: ICardProps[],\r\n}\r\n\r\nexport function Pile(props:IPileProps)\r\n{\r\n    const {\r\n        id,\r\n        cards,\r\n    } = props;\r\n\r\n    const {isOver, setNodeRef} = useDroppable({id});\r\n\r\n    const style:React.CSSProperties | undefined = isOver ? {\r\n        borderColor: 'white',\r\n    } : undefined;\r\n\r\n    return <div ref={setNodeRef} style={style} className='pile'>\r\n        {cards ? cards.map((card, i) => (\r\n            <Card key={i} {...card} />\r\n        )) : null}\r\n    </div>\r\n}","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Table, Pile, Card } from '../../components/deck';\r\nimport './style.css';\r\n\r\n\r\n\r\nexport function RouteDeck()\r\n{\r\n\tconst location = useLocation();\r\n\t\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('location', location);\r\n\t// }, [location]);\r\n\r\n\treturn <div className='route deck'>\r\n\t\t<Table>\r\n\t\t\t<div style={{\r\n\t\t\t\tdisplay: 'flex',\r\n\t\t\t\tgap: '0.5em',\r\n\t\t\t}}>\r\n\t\t\t\t<Pile id='pile-1' />\r\n\t\t\t\t<Card id='card-1' />\r\n\t\t\t\t<Card id='card-2' />\r\n\t\t\t</div>\r\n\t\t</Table>\r\n\t</div>\r\n}\r\n\r\nexport default RouteDeck;"],"names":["Table","props","children","className","onDragStart","e","console","log","onDragEnd","Card","id","useDraggable","isDragging","attributes","listeners","transform","setNodeRef","useState","isMoving","setIsMoving","useSpring","config","mass","tension","friction","_","x","y","compact","join","value","onStart","onRest","wrapAnimProps","classNames","undefined","animated","ref","style","Pile","cards","useDroppable","isOver","borderColor","map","card","i","RouteDeck","useLocation","display","gap"],"sourceRoot":""}